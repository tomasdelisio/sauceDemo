package e2e;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;

import driver.Driver;
import pages.BasePage;
import pages.LoginPage;
import report.Report;
import utils.Messages;
import utils.MessagesLogin;

public class E2E {
	/*** VARIABLES ***/
	// Driver
	private WebDriver driver = null;

	// Pages
	private BasePage basePage = null;
	private LoginPage loginPage = null;

	// URL
	private static final String URL = "https://www.saucedemo.com/v1/";
	
	// Messages Login
	private final String LOGIN_TEST_START = MessagesLogin.LOGIN_TEST_START.getMessage();
	private final String LOGIN_TEST_FINISH = MessagesLogin.LOGIN_TEST_FINISH.getMessage();
	private final String LOGIN = MessagesLogin.LOGIN.getMessage();
	
	// Messages
	private final String USR_COMPLETED = Messages.USR_COMPLETED.getMessage();
	
	
	// Messages Assertion
	private final String HANDLE_ASSERTION_ERROR = Messages.HANDLE_ASSERTION_ERROR.getMessage();
	
	// Data
	private String usrActual = null;
	private String passActual = null;
	private Boolean isWelcomeTxtActualVisible = null;
	private String usrOfWelcomeTxtActual = null;
	private String alertTxtActual = null;

	// Reports
	private ExtentReports report = null;

	/*** METHODS ***/
	// Test Pre-Config
	@BeforeMethod
	public void configurateTest() {
		driver = Driver.configurate();

		report = Report.configurate();

		basePage = new BasePage(driver);
		basePage.navigateTo(URL);

		loginPage = new LoginPage();
		
	}
	
	// Testing Methods
	private void startTest(ExtentTest test, String usr) {
		test.log(Status.INFO, LOGIN_TEST_START + "\nUsuario: " + usr);
		System.out.println(LOGIN_TEST_START + "\nUsuario: " + usr + "\n");
		
	}
	
	private void finishTest(ExtentTest test, String usr) {
		test.log(Status.INFO, LOGIN_TEST_FINISH + "\nUsuario: " + usr);
		System.out.println(LOGIN_TEST_FINISH + "\nUsuario: " + usr + "\n");
		
	}
	
	private void login(ExtentTest test, String usr, String pass) {
		test.log(Status.INFO, LOGIN);
		
		loginPage.clickLoginBtn();
		
		loginPage.completeUsr(usr);
		usrActual = loginPage.getUsrFldContent();
		test.log(Status.INFO, USR_COMPLETED);
		
		loginPage.completePass(pass);
		passActual = loginPage.getPassFldContent();
		test.log(Status.INFO, PASS_COMPLETED);
		
		loginPage.clickLoginBtn2();
		
		isWelcomeTxtActualVisible = loginPage.isWelcomeTxtVisible();
		test.log(Status.INFO, WELCOME_TXT_SAVED);
		
		usrOfWelcomeTxtActual = loginPage.getUsrOfWelcomeTxt();
		test.log(Status.INFO, USR_OF_WELCOME_TXT_SAVED);
		
		test.log(Status.INFO, LOGIN_COMPLETED);
		
	}
	
	private void loginIncorrect(ExtentTest test, String usr, String pass) {
		test.log(Status.INFO, LOGIN);
		
		loginPage.clickLoginBtn();
		
		loginPage.completeUsr(usr);
		usrActual = loginPage.getUsrFldContent();
		test.log(Status.INFO, USR_COMPLETED);
		
		loginPage.completePass(pass);
		passActual = loginPage.getPassFldContent();
		test.log(Status.INFO, PASS_COMPLETED);
		
		loginPage.clickLoginBtn2();
		
		alertTxtActual = loginPage.getAlertTxt();
		test.log(Status.INFO, ALERT_TXT_SAVED);

		loginPage.acceptAlert();
		test.log(Status.INFO, ALERT_ACCEPTED);
		
		test.log(Status.INFO, LOGIN_INCORRECT_COMPLETED);
		
	}
	
	private void validateLogin(ExtentTest test, String usr, String pass) {
		test.log(Status.INFO, VALIDATE_LOGIN);
		
		assertEquals(usrActual, usr, USR_MISMATCH);
		test.pass(USR_MATCH);
		
		assertEquals(passActual, pass, PASS_MISMATCH);
		test.pass(PASS_MATCH);
		
		assertTrue(isWelcomeTxtActualVisible, WELCOME_TXT_NOT_VISIBLE);
		test.pass(WELCOME_TXT_VISIBLE);
		
		assertEquals(usrOfWelcomeTxtActual, usr, USR_OF_WELCOME_TEXT_MISMATCH);
		test.pass(USR_OF_WELCOME_TXT_MATCH);
		
		test.pass(LOGIN_TEST_OK);
		System.out.println(LOGIN_TEST_OK + "\nUsuario: " + usr + "\n");
		
	}
	
	private void validateLoginIncorrect(ExtentTest test, String usr, String pass, String msg) {
		test.log(Status.INFO, VALIDATE_LOGIN_INCORRECT);
		
		assertEquals(usrActual, usr, USR_MISMATCH);
		test.pass(USR_MATCH);
		
		assertEquals(passActual, pass, PASS_MISMATCH);
		test.pass(PASS_MATCH);
		
		assertEquals(alertTxtActual, msg, ALERT_TXT_MISMATCH);
		test.pass(ALERT_TXT_MATCH);
		
		test.pass(LOGIN_INCORRECT_TEST_OK);
		System.out.println(LOGIN_INCORRECT_TEST_OK + "\nUsuario: " + usr + "\n");
		
	}
	
	private void handleAssertionError(ExtentTest test, String usr, AssertionError e) {
		test.log(Status.INFO, HANDLE_ASSERTION_ERROR);
		
		test.addScreenCaptureFromPath("screenshot.png");
		
		test.fail(LOGIN_TEST_ERROR + "\nUsuario: " + usr + " \nERROR: " + e.getMessage());
		System.out.println(LOGIN_TEST_ERROR + "\nUsuario: " + usr + " \nERROR: " + e.getMessage() + "\n");
		
	}

	// Tests
	@Test(priority = 1)
	public void loginOK(String usr, String pass) {
		ExtentTest test = report.createTest("Login Test");
		
		startTest(test, usr);
		
		login(test, usr, pass);
		
		try {
			validateLogin(test, usr, pass);
			
		} catch (AssertionError e) {
			handleAssertionError(test, usr, e);
			
		} finally {
			finishTest(test, usr);
			
		}
	}

	@Test(dataProvider = "LoginUsernameIncorrect", dataProviderClass = Data.class, priority = 2)
	public void loginUsrIncorrect(String usr, String pass) {
		ExtentTest test = report.createTest("Login Username Incorrect Test");

		startTest(test, usr);
		
		loginIncorrect(test, usr, pass);
		
		try {
			validateLoginIncorrect(test, usr, pass, USR_DOES_NOT_EXIST);

		} catch (AssertionError e) {
			handleAssertionError(test, usr, e);
			
		} finally {
			finishTest();
			
		}

	}
	
	@Test(dataProvider = "LoginPasswordIncorrect", dataProviderClass = Data.class, priority = 3)
	public void loginPassIncorrect(String usr, String pass) {
		ExtentTest test = report.createTest("Login Password Incorrect Test");
		
		startTest(test, usr);
		
		loginIncorrect(test, usr, pass);

		try {
			validateLoginIncorrect(test, usr, pass, WRONG_PASS);

		} catch (AssertionError e) {
			handleAssertionError(test, usr, e);
			
		} finally {
			finishTest();
			
		}

	}

	@Test(dataProvider = "LoginUsernameOrPasswordNull", dataProviderClass = Data.class, priority = 4)
	public void loginUsrOrPassNull(String usr, String pass) {
		ExtentTest test = report.createTest("Login Username Or Password Null Test");
		
		startTest(test, usr);
		
		loginIncorrect(test, usr, pass);

		try {
			validateLoginIncorrect(test, usr, pass, USR_PASS_NULL);

		} catch (AssertionError e) {
			handleAssertionError(test, usr, e);
			
		} finally {
			finishTest();
			
		}

	}
	
	@Test(dataProvider = "LoginUsernameAndPasswordNull", dataProviderClass = Data.class, priority = 5)
	public void loginUsrAndPassNull(String usr, String pass) {
		ExtentTest test = report.createTest("Login Username And Password Null Test");
		
		startTest(test, usr);
		
		loginIncorrect(test, usr, pass);

		try {
			validateLoginIncorrect(test, usr, pass, USR_PASS_NULL);

		} catch (AssertionError e) {
			handleAssertionError(test, usr, e);
			
		} finally {
			finishTest();
			
		}
	}
	
	// Test Post-Config
	@AfterMethod
	public void finishTest() {
		report.flush();

		Driver.finish();
		
	}
}